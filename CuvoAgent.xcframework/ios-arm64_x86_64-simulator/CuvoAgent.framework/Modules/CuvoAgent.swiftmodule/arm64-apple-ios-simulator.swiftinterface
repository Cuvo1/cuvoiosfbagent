// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CuvoAgent
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import Combine
import Compression
import CoreFoundation
import CoreGraphics
import CoreMedia
import CoreText
@_exported import CuvoAgent
import DeveloperToolsSupport
import Foundation
import MobileCoreServices
import QuartzCore
import ReplayKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_hasMissingDesignatedInitializers public class ReplayFileUtil {
  public class func filePath() -> Foundation.URL
  public class func deleteFile()
  public class func isRecordingAvailible() -> Swift.Bool
  @objc deinit
}
public typealias Constraint = UIKit.NSLayoutConstraint
public typealias Constraints = [CuvoAgent.Constraint]
public enum ConstraintRelation : Swift.Int {
  case equal
  case equalOrLess
  case equalOrGreater
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.Collection where Self.Element == UIKit.NSLayoutConstraint {
  public func activate()
  public func deActivate()
}
extension UIKit.NSLayoutConstraint {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func with(_ p: CuvoAgent.LayoutPriority) -> Self
  @_Concurrency.MainActor @preconcurrency public func set(_ active: Swift.Bool) -> Self
}
extension UIKit.UIView : CuvoAgent.Constrainable {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func prepareForLayout() -> Self
}
extension UIKit.UILayoutGuide : CuvoAgent.Constrainable {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func prepareForLayout() -> Self
}
public protocol Constrainable {
  var topAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var bottomAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var leftAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var rightAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var leadingAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var trailingAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var centerXAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var centerYAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var widthAnchor: UIKit.NSLayoutDimension { get }
  var heightAnchor: UIKit.NSLayoutDimension { get }
  @discardableResult
  func prepareForLayout() -> Self
}
@objc @_inheritsConvenienceInitializers public class ScreenRecordCoordinator : ObjectiveC.NSObject {
  final public let screenRecorder: CuvoAgent.ScreenRecorder
  public var recordCompleted: (((any Swift.Error)?) -> Swift.Void)?
  @objc override dynamic public init()
  public func startRecording(recordingHandler: @escaping ((any Swift.Error)?) -> Swift.Void, onCompletion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func stopRecording()
  @objc deinit
}
public class ScreenRecorder {
  public enum recordingQuality : CoreFoundation.CGFloat {
    case lowest
    case low
    case normal
    case good
    case better
    case high
    case best
    public init?(rawValue: CoreFoundation.CGFloat)
    public typealias RawValue = CoreFoundation.CGFloat
    public var rawValue: CoreFoundation.CGFloat {
      get
    }
  }
  public var recordingQua: CuvoAgent.ScreenRecorder.recordingQuality
  public var onRecordingError: (() -> Swift.Void)?
  public var delegate: Swift.AnyObject?
  public init()
  @objc deinit
}
public typealias SSRVGestureHandler = (_ gesture: UIKit.UIGestureRecognizer) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class SwiftyStarRatingView : UIKit.UIControl {
  @_Concurrency.MainActor @preconcurrency public var shouldBecomeFirstResponder: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var shouldBeginGestureHandler: CuvoAgent.SSRVGestureHandler!
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var minimumValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var maximumValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var value: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func observe<Value>(_ keyPath: Swift.KeyPath<CuvoAgent.SwiftyStarRatingView, Value>, options: Foundation.NSKeyValueObservingOptions, changeHandler: @escaping (CuvoAgent.SwiftyStarRatingView, Foundation.NSKeyValueObservedChange<Value>) -> Swift.Void) -> Foundation.NSKeyValueObservation
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var spacing: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var continuous: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var allowsHalfStars: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var accurateHalfStars: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var emptyStarImage: UIKit.UIImage?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var halfStarImage: UIKit.UIImage?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var filledStarImage: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
extension CuvoAgent.SwiftyStarRatingView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension CuvoAgent.SwiftyStarRatingView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func accessibilityActivate() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func accessibilityIncrement()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func accessibilityDecrement()
}
extension UIKit.UIEdgeInsets {
  public static func uniform(_ value: CoreFoundation.CGFloat) -> CuvoAgent.TinyEdgeInsets
  public static func top(_ value: CoreFoundation.CGFloat) -> CuvoAgent.TinyEdgeInsets
  public static func left(_ value: CoreFoundation.CGFloat) -> CuvoAgent.TinyEdgeInsets
  public static func bottom(_ value: CoreFoundation.CGFloat) -> CuvoAgent.TinyEdgeInsets
  public static func right(_ value: CoreFoundation.CGFloat) -> CuvoAgent.TinyEdgeInsets
  public static func horizontal(_ value: CoreFoundation.CGFloat) -> CuvoAgent.TinyEdgeInsets
  public static func vertical(_ value: CoreFoundation.CGFloat) -> CuvoAgent.TinyEdgeInsets
}
public func + (lhs: CuvoAgent.TinyEdgeInsets, rhs: CuvoAgent.TinyEdgeInsets) -> CuvoAgent.TinyEdgeInsets
@objc public enum KeyboardAvoidingMode : Swift.Int {
  case maximum
  case minimum
  case minimumDelayed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class KeyboardAvoiding : ObjectiveC.NSObject {
  public static var isKeyboardVisible: Swift.Bool {
    get
  }
  public static var buffer: CoreFoundation.CGFloat
  public static var paddingForCurrentAvoidingView: CoreFoundation.CGFloat
  @objc public static var padding: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  public static var keyboardAvoidingMode: CuvoAgent.KeyboardAvoidingMode
  @objc public static var avoidingBlock: ((Swift.Bool, CoreFoundation.CGFloat, CoreFoundation.CGFloat, UIKit.UIView.AnimationOptions) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc public static var avoidingView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc public class func setAvoidingView(_ avoidingView: UIKit.UIView?, withTriggerView triggerView: UIKit.UIView)
  public class func addTriggerView(_ triggerView: UIKit.UIView)
  public class func removeTriggerView(_ triggerView: UIKit.UIView)
  public class func removeAll()
  @objc override dynamic public init()
  @objc deinit
}
public typealias TinyView = UIKit.UIView
public typealias LayoutGuide = UIKit.UILayoutGuide
public typealias ConstraintAxis = UIKit.NSLayoutConstraint.Axis
public typealias LayoutPriority = UIKit.UILayoutPriority
public typealias TinyEdgeInsets = UIKit.UIEdgeInsets
public struct SurveyViewConfiguration {
  public static func setup(apiKey: Swift.String = "", productID: Swift.String = "", email: Swift.String = "", endPoint: Swift.String, orgID: Swift.String, version: Swift.String) -> UIKit.UIViewController
}
@_hasMissingDesignatedInitializers public class Asset : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  final public let id: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension CuvoAgent.Asset : @unchecked Swift.Sendable {
}
public typealias AnimationFrameTime = CoreFoundation.CGFloat
public typealias AnimationProgressTime = CoreFoundation.CGFloat
public protocol AnimationImageProvider {
  var cacheEligible: Swift.Bool { get }
  func imageForAsset(asset: CuvoAgent.ImageAsset) -> CoreGraphics.CGImage?
  func contentsGravity(for asset: CuvoAgent.ImageAsset) -> QuartzCore.CALayerContentsGravity
}
extension CuvoAgent.AnimationImageProvider {
  public var cacheEligible: Swift.Bool {
    get
  }
  public func contentsGravity(for _: CuvoAgent.ImageAsset) -> QuartzCore.CALayerContentsGravity
}
extension CuvoAgent.LottieAnimationView {
  @_Concurrency.MainActor @preconcurrency convenience public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, imageProvider: (any CuvoAgent.AnimationImageProvider)? = nil, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: CuvoAgent.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(filePath: Swift.String, imageProvider: (any CuvoAgent.AnimationImageProvider)? = nil, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: CuvoAgent.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(url: Foundation.URL, imageProvider: (any CuvoAgent.AnimationImageProvider)? = nil, session: Foundation.URLSession = .shared, closure: @escaping CuvoAgent.LottieAnimationView.DownloadClosure, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: CuvoAgent.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(asset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, imageProvider: (any CuvoAgent.AnimationImageProvider)? = nil, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: CuvoAgent.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieName name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationId: Swift.String? = nil, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: CuvoAgent.LottieConfiguration = .shared, completion: ((CuvoAgent.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieFilePath filePath: Swift.String, animationId: Swift.String? = nil, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: CuvoAgent.LottieConfiguration = .shared, completion: ((CuvoAgent.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieUrl url: Foundation.URL, animationId: Swift.String? = nil, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: CuvoAgent.LottieConfiguration = .shared, session: Foundation.URLSession = .shared, completion: ((CuvoAgent.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieAsset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationId: Swift.String? = nil, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: CuvoAgent.LottieConfiguration = .shared, completion: ((CuvoAgent.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  public typealias DownloadClosure = ((any Swift.Error)?) -> Swift.Void
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class LottieAnimationViewBase : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CuvoAgent.LottieVector1D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LottieVector2D : Swift.Codable, Swift.Hashable, Swift.Sendable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CuvoAgent.LottieVector2D, b: CuvoAgent.LottieVector2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension CuvoAgent.LottieVector3D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension CuvoAgent.LottieVector3D {
  public var pointValue: CoreFoundation.CGPoint {
    get
  }
  public var sizeValue: CoreFoundation.CGSize {
    get
  }
}
public typealias LottieCompletionBlock = (_ completed: Swift.Bool) -> Swift.Void
public enum DotLottieError : Swift.Error {
  case noDataLoaded
  case assetNotFound(name: Swift.String, bundle: Foundation.Bundle?)
  case loadingFromAssetNotSupported
  @available(*, deprecated, message: "Unused")
  case invalidFileFormat
  @available(*, deprecated, message: "Unused")
  case invalidData
  @available(*, deprecated, message: "Unused")
  case animationNotAvailable
}
public struct LottieConfiguration : Swift.Hashable {
  public init(renderingEngine: CuvoAgent.RenderingEngineOption = .automatic, decodingStrategy: CuvoAgent.DecodingStrategy = .dictionaryBased, colorSpace: CoreGraphics.CGColorSpace = CGColorSpaceCreateDeviceRGB(), reducedMotionOption: CuvoAgent.ReducedMotionOption = .systemReducedMotionToggle)
  public static var shared: CuvoAgent.LottieConfiguration
  public var renderingEngine: CuvoAgent.RenderingEngineOption
  public var decodingStrategy: CuvoAgent.DecodingStrategy
  public var reducedMotionOption: CuvoAgent.ReducedMotionOption
  public var colorSpace: CoreGraphics.CGColorSpace
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CuvoAgent.LottieConfiguration, b: CuvoAgent.LottieConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DotLottieCacheProvider : Swift.Sendable {
  func file(forKey: Swift.String) -> CuvoAgent.DotLottieFile?
  func setFile(_ lottie: CuvoAgent.DotLottieFile, forKey: Swift.String)
  func clearCache()
}
public enum DecodingStrategy : Swift.Hashable {
  case legacyCodable
  case dictionaryBased
  public static func == (a: CuvoAgent.DecodingStrategy, b: CuvoAgent.DecodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class LottieAnimationLayer : QuartzCore.CALayer {
  public init(animation: CuvoAgent.LottieAnimation?, imageProvider: (any CuvoAgent.AnimationImageProvider)? = nil, textProvider: any CuvoAgent.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any CuvoAgent.AnimationFontProvider = DefaultFontProvider(), configuration: CuvoAgent.LottieConfiguration = .shared, logger: CuvoAgent.LottieLogger = .shared)
  public init(dotLottie: CuvoAgent.DotLottieFile?, animationId: Swift.String? = nil, textProvider: any CuvoAgent.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any CuvoAgent.AnimationFontProvider = DefaultFontProvider(), configuration: CuvoAgent.LottieConfiguration = .shared, logger: CuvoAgent.LottieLogger = .shared)
  public init(configuration: CuvoAgent.LottieConfiguration = .shared, logger: CuvoAgent.LottieLogger = .shared)
  open func play(completion: CuvoAgent.LottieCompletionBlock? = nil)
  open func play(fromProgress: CuvoAgent.AnimationProgressTime? = nil, toProgress: CuvoAgent.AnimationProgressTime, loopMode: CuvoAgent.LottieLoopMode? = nil, completion: CuvoAgent.LottieCompletionBlock? = nil)
  open func play(fromFrame: CuvoAgent.AnimationFrameTime? = nil, toFrame: CuvoAgent.AnimationFrameTime, loopMode: CuvoAgent.LottieLoopMode? = nil, completion: CuvoAgent.LottieCompletionBlock? = nil)
  open func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: CuvoAgent.LottieLoopMode? = nil, completion: CuvoAgent.LottieCompletionBlock? = nil)
  open func play(marker: Swift.String, loopMode: CuvoAgent.LottieLoopMode? = nil, completion: CuvoAgent.LottieCompletionBlock? = nil)
  open func play(markers: [Swift.String], completion: CuvoAgent.LottieCompletionBlock? = nil)
  open func stop()
  open func pause()
  open func pause(at state: CuvoAgent.LottiePlaybackMode.PausedState)
  @available(*, deprecated, renamed: "setPlaybackMode(_:completion:)", message: "Will be removed in a future major release.")
  open func play(_ playbackMode: CuvoAgent.LottiePlaybackMode, animationCompletionHandler: CuvoAgent.LottieCompletionBlock? = nil)
  open func setPlaybackMode(_ playbackMode: CuvoAgent.LottiePlaybackMode, completion: CuvoAgent.LottieCompletionBlock? = nil)
  open func play(_ playbackMode: CuvoAgent.LottiePlaybackMode.PlaybackMode, completion: CuvoAgent.LottieCompletionBlock? = nil)
  public var currentPlaybackMode: CuvoAgent.LottiePlaybackMode? {
    get
  }
  public var valueProviders: [CuvoAgent.AnimationKeypath : any CuvoAgent.AnyValueProvider] {
    get
  }
  public var animationLayerDidLoad: ((_ animationLayer: CuvoAgent.LottieAnimationLayer, _ renderingEngine: CuvoAgent.RenderingEngineOption) -> Swift.Void)?
  public var configuration: CuvoAgent.LottieConfiguration {
    get
    set
  }
  public var animationLayer: QuartzCore.CALayer? {
    get
  }
  public var screenScale: CoreFoundation.CGFloat {
    get
    set
  }
  public var backgroundBehavior: CuvoAgent.LottieBackgroundBehavior {
    get
    set
  }
  public var animation: CuvoAgent.LottieAnimation? {
    get
    set
  }
  public var animationLoaded: ((_ animationLayer: CuvoAgent.LottieAnimationLayer, _ animation: CuvoAgent.LottieAnimation) -> Swift.Void)? {
    get
    set
  }
  public var imageProvider: any CuvoAgent.AnimationImageProvider {
    get
    set
  }
  public var textProvider: any CuvoAgent.AnimationKeypathTextProvider {
    get
    set
  }
  public var fontProvider: any CuvoAgent.AnimationFontProvider {
    get
    set
  }
  public var maskAnimationToBounds: Swift.Bool {
    get
    set
  }
  public var isAnimationPlaying: Swift.Bool {
    get
  }
  public var loopMode: CuvoAgent.LottieLoopMode {
    get
    set
  }
  public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  public var currentProgress: CuvoAgent.AnimationProgressTime {
    get
    set
  }
  public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  public var currentFrame: CuvoAgent.AnimationFrameTime {
    get
    set
  }
  public var realtimeAnimationFrame: CuvoAgent.AnimationFrameTime {
    get
  }
  public var realtimeAnimationProgress: CuvoAgent.AnimationProgressTime {
    get
  }
  public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  public var currentRenderingEngine: CuvoAgent.RenderingEngine? {
    get
  }
  public var mainThreadRenderingEngineShouldForceDisplayUpdateOnEachFrame: Swift.Bool {
    get
    set
  }
  public func loadAnimation(_ animationId: Swift.String? = nil, from dotLottieFile: CuvoAgent.DotLottieFile)
  public func loadAnimation(atIndex index: Swift.Int, from dotLottieFile: CuvoAgent.DotLottieFile)
  public func reloadImages()
  public func forceDisplayUpdate()
  public func setValueProvider(_ valueProvider: any CuvoAgent.AnyValueProvider, keypath: CuvoAgent.AnimationKeypath)
  public func removeValueProvider(for keypath: CuvoAgent.AnimationKeypath)
  public func getValue(for keypath: CuvoAgent.AnimationKeypath, atFrame: CuvoAgent.AnimationFrameTime?) -> Any?
  public func getOriginalValue(for keypath: CuvoAgent.AnimationKeypath, atFrame: CuvoAgent.AnimationFrameTime?) -> Any?
  public func logHierarchyKeypaths()
  public func allHierarchyKeypaths() -> [Swift.String]
  public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: CuvoAgent.AnimationKeypath?) -> CoreFoundation.CGRect?
  public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: CuvoAgent.AnimationKeypath?) -> CoreFoundation.CGPoint?
  public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: CuvoAgent.AnimationKeypath)
  public func progressTime(forMarker named: Swift.String) -> CuvoAgent.AnimationProgressTime?
  public func frameTime(forMarker named: Swift.String) -> CuvoAgent.AnimationFrameTime?
  public func durationFrameTime(forMarker named: Swift.String) -> CuvoAgent.AnimationFrameTime?
  public func updateAnimationForBackgroundState()
  public func updateAnimationForForegroundState(wasWaitingToPlayAnimation: Swift.Bool)
  @objc deinit
}
final public class SizeValueProvider {
  public init(block: @escaping CuvoAgent.SizeValueProvider.SizeValueBlock)
  public init(_ size: CoreFoundation.CGSize)
  public typealias SizeValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  final public var size: CoreFoundation.CGSize {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: CuvoAgent.ValueProviderStorage<CuvoAgent.LottieVector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension CuvoAgent.SizeValueProvider : Swift.Equatable {
  public static func == (lhs: CuvoAgent.SizeValueProvider, rhs: CuvoAgent.SizeValueProvider) -> Swift.Bool
}
public enum LayerType : Swift.Int, Swift.Codable {
  case precomp
  case solid
  case image
  case null
  case shape
  case text
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatteType : Swift.Int, Swift.Codable {
  case none
  case add
  case invert
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlendMode : Swift.Int, Swift.Codable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case hardLight
  case softLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias LottieControlType = UIKit.UIControl
public typealias LottieControlState = UIKit.UIControl.State
public typealias LottieControlEvent = UIKit.UIControl.Event
public enum LottiePlaybackMode : Swift.Hashable {
  case paused(at: CuvoAgent.LottiePlaybackMode.PausedState)
  case playing(_: CuvoAgent.LottiePlaybackMode.PlaybackMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case progress(_: CuvoAgent.AnimationProgressTime)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case frame(_: CuvoAgent.AnimationFrameTime)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case time(_: Foundation.TimeInterval)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case pause
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromProgress(_: CuvoAgent.AnimationProgressTime?, toProgress: CuvoAgent.AnimationProgressTime, loopMode: CuvoAgent.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromFrame(_: CuvoAgent.AnimationFrameTime?, toFrame: CuvoAgent.AnimationFrameTime, loopMode: CuvoAgent.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromMarker(_: Swift.String?, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: CuvoAgent.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case marker(_: Swift.String, loopMode: CuvoAgent.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case markers(_: [Swift.String])
  public enum PausedState : Swift.Hashable {
    case currentFrame
    case progress(_: CuvoAgent.AnimationProgressTime)
    case frame(_: CuvoAgent.AnimationFrameTime)
    case time(_: Foundation.TimeInterval)
    case marker(_: Swift.String, position: CuvoAgent.LottieMarkerPosition = .start)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: CuvoAgent.LottiePlaybackMode.PausedState, b: CuvoAgent.LottiePlaybackMode.PausedState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PlaybackMode : Swift.Hashable {
    case fromProgress(_: CuvoAgent.AnimationProgressTime?, toProgress: CuvoAgent.AnimationProgressTime, loopMode: CuvoAgent.LottieLoopMode)
    case fromFrame(_: CuvoAgent.AnimationFrameTime?, toFrame: CuvoAgent.AnimationFrameTime, loopMode: CuvoAgent.LottieLoopMode)
    case fromMarker(_: Swift.String?, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: CuvoAgent.LottieLoopMode)
    case marker(_: Swift.String, loopMode: CuvoAgent.LottieLoopMode)
    case markers(_: [Swift.String])
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: CuvoAgent.LottiePlaybackMode.PlaybackMode, b: CuvoAgent.LottiePlaybackMode.PlaybackMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CuvoAgent.LottiePlaybackMode, b: CuvoAgent.LottiePlaybackMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension CuvoAgent.LottiePlaybackMode {
  public static var paused: CuvoAgent.LottiePlaybackMode {
    get
  }
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toProgress(_ toProgress: CuvoAgent.AnimationProgressTime, loopMode: CuvoAgent.LottieLoopMode) -> CuvoAgent.LottiePlaybackMode
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toFrame(_ toFrame: CuvoAgent.AnimationFrameTime, loopMode: CuvoAgent.LottieLoopMode) -> CuvoAgent.LottiePlaybackMode
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toMarker(_ toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: CuvoAgent.LottieLoopMode) -> CuvoAgent.LottiePlaybackMode
}
extension CuvoAgent.LottiePlaybackMode.PlaybackMode {
  public static func toProgress(_ toProgress: CuvoAgent.AnimationProgressTime, loopMode: CuvoAgent.LottieLoopMode) -> CuvoAgent.LottiePlaybackMode.PlaybackMode
  public static func toFrame(_ toFrame: CuvoAgent.AnimationFrameTime, loopMode: CuvoAgent.LottieLoopMode) -> CuvoAgent.LottiePlaybackMode.PlaybackMode
  public static func toMarker(_ toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: CuvoAgent.LottieLoopMode) -> CuvoAgent.LottiePlaybackMode.PlaybackMode
}
public enum LottieMarkerPosition : Swift.Hashable {
  case start
  case end
  public static func == (a: CuvoAgent.LottieMarkerPosition, b: CuvoAgent.LottieMarkerPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnimationFontProvider {
  func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
}
final public class DefaultFontProvider : CuvoAgent.AnimationFontProvider {
  public init()
  final public func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
  @objc deinit
}
extension CuvoAgent.DefaultFontProvider : Swift.Equatable {
  public static func == (_: CuvoAgent.DefaultFontProvider, _: CuvoAgent.DefaultFontProvider) -> Swift.Bool
}
public class FilepathImageProvider : CuvoAgent.AnimationImageProvider {
  public init(filepath: Swift.String, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public init(filepath: Foundation.URL, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public func imageForAsset(asset: CuvoAgent.ImageAsset) -> CoreGraphics.CGImage?
  public func contentsGravity(for _: CuvoAgent.ImageAsset) -> QuartzCore.CALayerContentsGravity
  @objc deinit
}
extension CuvoAgent.FilepathImageProvider : Swift.Equatable {
  public static func == (lhs: CuvoAgent.FilepathImageProvider, rhs: CuvoAgent.FilepathImageProvider) -> Swift.Bool
}
@objc final public class CompatibleAnimation : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, subdirectory: Swift.String? = nil, bundle: Foundation.Bundle = Bundle.main)
  @objc deinit
}
@objc public enum CompatibleRenderingEngineOption : Swift.Int {
  case shared
  case defaultEngine
  case automatic
  case mainThread
  case coreAnimation
  public static func generateLottieConfiguration(_ configuration: CuvoAgent.CompatibleRenderingEngineOption) -> CuvoAgent.LottieConfiguration
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CompatibleBackgroundBehavior : Swift.Int {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  case continuePlaying
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class CompatibleAnimationView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(compatibleAnimation: CuvoAgent.CompatibleAnimation)
  @objc @_Concurrency.MainActor @preconcurrency public init(compatibleAnimation: CuvoAgent.CompatibleAnimation, compatibleRenderingEngineOption: CuvoAgent.CompatibleRenderingEngineOption)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(url: Foundation.URL)
  @objc @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL, compatibleRenderingEngineOption: CuvoAgent.CompatibleRenderingEngineOption)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(data: Foundation.Data)
  @objc @_Concurrency.MainActor @preconcurrency public init(data: Foundation.Data, compatibleRenderingEngineOption: CuvoAgent.CompatibleRenderingEngineOption)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency final public var compatibleAnimation: CuvoAgent.CompatibleAnimation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var loopAnimationCount: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var compatibleDictionaryTextProvider: CuvoAgent.CompatibleDictionaryTextProvider? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var shouldRasterizeWhenIdle: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var currentProgress: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var duration: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var currentTime: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var currentFrame: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var realtimeAnimationFrame: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var realtimeAnimationProgress: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var animationSpeed: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var respectAnimationFrameRate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var isAnimationPlaying: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var backgroundMode: CuvoAgent.CompatibleBackgroundBehavior {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public func play()
  @objc @_Concurrency.MainActor @preconcurrency final public func play(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor @preconcurrency final public func play(fromProgress: CoreFoundation.CGFloat, toProgress: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency final public func play(fromFrame: CoreFoundation.CGFloat, toFrame: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency final public func play(fromMarker: Swift.String, toMarker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency final public func play(marker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency final public func stop()
  @objc @_Concurrency.MainActor @preconcurrency final public func pause()
  @objc @_Concurrency.MainActor @preconcurrency final public func reloadImages()
  @objc @_Concurrency.MainActor @preconcurrency final public func forceDisplayUpdate()
  @objc @_Concurrency.MainActor @preconcurrency final public func getValue(for keypath: CuvoAgent.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> Any?
  @objc @_Concurrency.MainActor @preconcurrency final public func logHierarchyKeypaths()
  @objc @_Concurrency.MainActor @preconcurrency final public func setColorValue(_ color: UIKit.UIColor, forKeypath keypath: CuvoAgent.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor @preconcurrency final public func getColorValue(for keypath: CuvoAgent.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency final public func addSubview(_ subview: CuvoAgent.AnimationSubview, forLayerAt keypath: CuvoAgent.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor @preconcurrency final public func convert(rect: CoreFoundation.CGRect, toLayerAt keypath: CuvoAgent.CompatibleAnimationKeypath?) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor @preconcurrency final public func convert(point: CoreFoundation.CGPoint, toLayerAt keypath: CuvoAgent.CompatibleAnimationKeypath?) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor @preconcurrency final public func progressTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency final public func frameTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency final public func durationFrameTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc final public class CompatibleDictionaryTextProvider : ObjectiveC.NSObject {
  @objc public init(values: [Swift.String : Swift.String])
  @objc deinit
}
extension CuvoAgent.DotLottieFile {
  public enum SynchronouslyBlockingCurrentThread {
    public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache) -> Swift.Result<CuvoAgent.DotLottieFile, any Swift.Error>
    public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache) -> Swift.Result<CuvoAgent.DotLottieFile, any Swift.Error>
    public static func loadedFrom(data: Foundation.Data, filename: Swift.String) -> Swift.Result<CuvoAgent.DotLottieFile, any Swift.Error>
  }
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> CuvoAgent.DotLottieFile
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<CuvoAgent.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> CuvoAgent.DotLottieFile
  public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<CuvoAgent.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func asset(named name: Swift.String, bundle: Foundation.Bundle = Bundle.main, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> CuvoAgent.DotLottieFile
  public static func asset(named name: Swift.String, bundle: Foundation.Bundle = Bundle.main, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<CuvoAgent.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> CuvoAgent.DotLottieFile
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, dotLottieCache: (any CuvoAgent.DotLottieCacheProvider)? = DotLottieCache.sharedCache, handleResult: @escaping (Swift.Result<CuvoAgent.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(data: Foundation.Data, filename: Swift.String, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<CuvoAgent.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(data: Foundation.Data, filename: Swift.String, dispatchQueue: Dispatch.DispatchQueue = .dotLottie) async throws -> CuvoAgent.DotLottieFile
}
extension Dispatch.DispatchQueue {
  public static let dotLottie: Dispatch.DispatchQueue
}
final public class FloatValueProvider {
  public init(block: @escaping CuvoAgent.FloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreFoundation.CGFloat)
  public typealias CGFloatValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  final public var float: CoreFoundation.CGFloat {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: CuvoAgent.ValueProviderStorage<CuvoAgent.LottieVector1D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension CuvoAgent.FloatValueProvider : Swift.Equatable {
  public static func == (lhs: CuvoAgent.FloatValueProvider, rhs: CuvoAgent.FloatValueProvider) -> Swift.Bool
}
extension CuvoAgent.LottieColor : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
public struct AnimationKeypath : Swift.Hashable, Swift.ExpressibleByStringLiteral {
  public init(keypath: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(keys: [Swift.String])
  public var keys: [Swift.String] {
    get
  }
  public var string: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CuvoAgent.AnimationKeypath, b: CuvoAgent.AnimationKeypath) -> Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieAnimationSource : Swift.Sendable {
  case lottieAnimation(CuvoAgent.LottieAnimation)
  case dotLottieFile(CuvoAgent.DotLottieFile)
}
extension CuvoAgent.LottieAnimation {
  final public var animationSource: CuvoAgent.LottieAnimationSource {
    get
  }
}
extension CuvoAgent.DotLottieFile {
  final public var animationSource: CuvoAgent.LottieAnimationSource {
    get
  }
}
final public class LottieLogger {
  public init(assert: @escaping CuvoAgent.LottieLogger.Assert = { condition, message, file, line in
       
       
       
      Swift.assert(condition(), message(), file: file, line: line)
    }, assertionFailure: @escaping CuvoAgent.LottieLogger.AssertionFailure = { message, file, line in
       
       
       
       
      Swift.assertionFailure(message(), file: file, line: line)
    }, warn: @escaping CuvoAgent.LottieLogger.Warn = { message, _, _ in
    }, info: @escaping CuvoAgent.LottieLogger.Info = { message in
    })
  public typealias Assert = (_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias AssertionFailure = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Warn = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Info = (_ message: @autoclosure () -> Swift.String) -> Swift.Void
  public static var shared: CuvoAgent.LottieLogger
  final public func assert(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func assertionFailure(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func warn(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func info(_ message: @autoclosure () -> Swift.String = String())
  @objc deinit
}
extension CuvoAgent.LottieLogger {
  public static var printToConsole: CuvoAgent.LottieLogger {
    get
  }
}
public enum RenderingEngineOption : Swift.Hashable {
  case automatic
  case specific(CuvoAgent.RenderingEngine)
  public static var mainThread: CuvoAgent.RenderingEngineOption {
    get
  }
  public static var coreAnimation: CuvoAgent.RenderingEngineOption {
    get
  }
}
public enum RenderingEngine : Swift.Hashable {
  case mainThread
  case coreAnimation
}
extension CuvoAgent.RenderingEngineOption : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension CuvoAgent.RenderingEngine : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public class DotLottieCache : CuvoAgent.DotLottieCacheProvider {
  public init()
  public static let sharedCache: CuvoAgent.DotLottieCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public func clearCache()
  public func file(forKey key: Swift.String) -> CuvoAgent.DotLottieFile?
  public func setFile(_ lottie: CuvoAgent.DotLottieFile, forKey key: Swift.String)
  @objc deinit
}
extension CuvoAgent.DotLottieCache : @unchecked Swift.Sendable {
}
@_Concurrency.MainActor @preconcurrency public struct LottieSwitch {
  @_Concurrency.MainActor @preconcurrency public init(animation: CuvoAgent.LottieAnimation?)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (CuvoAgent.AnimatedSwitch) -> Swift.Void) -> CuvoAgent.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: CuvoAgent.LottieConfiguration) -> CuvoAgent.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func isOn(_ binding: SwiftUICore.Binding<Swift.Bool>) -> CuvoAgent.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func onAnimation(fromProgress onStartProgress: CuvoAgent.AnimationProgressTime, toProgress onEndProgress: CuvoAgent.AnimationProgressTime) -> CuvoAgent.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func offAnimation(fromProgress offStartProgress: CuvoAgent.AnimationProgressTime, toProgress offEndProgress: CuvoAgent.AnimationProgressTime) -> CuvoAgent.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: CuvoAgent.AnimationKeypath) -> CuvoAgent.LottieSwitch where ValueProvider : CuvoAgent.AnyValueProvider, ValueProvider : Swift.Equatable
  public typealias Body = @_opaqueReturnTypeOf("$s9CuvoAgent12LottieSwitchV4bodyQrvp", 0) __
}
@available(*, deprecated, message: "Use DefaultAnimationCache instead, which is thread-safe and automatically responds to memory pressure.")
public typealias LRUAnimationCache = CuvoAgent.DefaultAnimationCache
public protocol AnimationKeypathTextProvider : AnyObject {
  func text(for keypath: CuvoAgent.AnimationKeypath, sourceText: Swift.String) -> Swift.String?
}
@available(*, deprecated, message: "`AnimationKeypathTextProvider` has been deprecated and renamed to `LegacyAnimationTextProvider`. Instead, conform to `AnimationKeypathTextProvider` instead or conform to `LegacyAnimationTextProvider` explicitly.")
public typealias AnimationTextProvider = CuvoAgent.LegacyAnimationTextProvider
public protocol LegacyAnimationTextProvider : CuvoAgent.AnimationKeypathTextProvider {
  func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
}
extension CuvoAgent.LegacyAnimationTextProvider {
  public func text(for _: CuvoAgent.AnimationKeypath, sourceText _: Swift.String) -> Swift.String?
}
final public class DictionaryTextProvider : CuvoAgent.AnimationKeypathTextProvider, CuvoAgent.LegacyAnimationTextProvider {
  public init(_ values: [Swift.String : Swift.String])
  final public func text(for keypath: CuvoAgent.AnimationKeypath, sourceText: Swift.String) -> Swift.String?
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
extension CuvoAgent.DictionaryTextProvider : Swift.Equatable {
  public static func == (lhs: CuvoAgent.DictionaryTextProvider, rhs: CuvoAgent.DictionaryTextProvider) -> Swift.Bool
}
final public class DefaultTextProvider : CuvoAgent.AnimationKeypathTextProvider, CuvoAgent.LegacyAnimationTextProvider {
  public init()
  final public func textFor(keypathName _: Swift.String, sourceText: Swift.String) -> Swift.String
  final public func text(for _: CuvoAgent.AnimationKeypath, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
extension CuvoAgent.DefaultTextProvider : Swift.Equatable {
  public static func == (_: CuvoAgent.DefaultTextProvider, _: CuvoAgent.DefaultTextProvider) -> Swift.Bool
}
public struct DotLottieConfiguration {
  public var id: Swift.String
  public var loopMode: CuvoAgent.LottieLoopMode
  public var speed: Swift.Double
  public var imageProvider: (any CuvoAgent.AnimationImageProvider)? {
    get
  }
}
public struct DotLottieConfigurationComponents : Swift.OptionSet {
  public init(rawValue: Swift.Int)
  public static let imageProvider: CuvoAgent.DotLottieConfigurationComponents
  public static let loopMode: CuvoAgent.DotLottieConfigurationComponents
  public static let animationSpeed: CuvoAgent.DotLottieConfigurationComponents
  public static let all: CuvoAgent.DotLottieConfigurationComponents
  public static let none: CuvoAgent.DotLottieConfigurationComponents
  public let rawValue: Swift.Int
  public typealias ArrayLiteralElement = CuvoAgent.DotLottieConfigurationComponents
  public typealias Element = CuvoAgent.DotLottieConfigurationComponents
  public typealias RawValue = Swift.Int
}
public class DefaultAnimationCache : CuvoAgent.AnimationCacheProvider {
  public init()
  public static let sharedCache: CuvoAgent.DefaultAnimationCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public func clearCache()
  public func animation(forKey key: Swift.String) -> CuvoAgent.LottieAnimation?
  public func setAnimation(_ animation: CuvoAgent.LottieAnimation, forKey key: Swift.String)
  @objc deinit
}
extension CuvoAgent.DefaultAnimationCache : @unchecked Swift.Sendable {
}
@_Concurrency.MainActor @preconcurrency public struct LottieView<Placeholder> where Placeholder : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(animation: CuvoAgent.LottieAnimation?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(dotLottieFile: CuvoAgent.DotLottieFile?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> CuvoAgent.LottieAnimation?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> CuvoAgent.LottieAnimation?, @SwiftUICore.ViewBuilder placeholder: @escaping (() -> Placeholder))
  @_Concurrency.MainActor @preconcurrency public init(_ loadDotLottieFile: @escaping () async throws -> CuvoAgent.DotLottieFile?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadDotLottieFile: @escaping () async throws -> CuvoAgent.DotLottieFile?, @SwiftUICore.ViewBuilder placeholder: @escaping (() -> Placeholder))
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> CuvoAgent.LottieAnimationSource?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> CuvoAgent.LottieAnimationSource?, @SwiftUICore.ViewBuilder placeholder: @escaping () -> Placeholder)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure<Property>(_ property: Swift.ReferenceWritableKeyPath<CuvoAgent.LottieAnimationView, Property>, to value: Property) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func configure<Property>(_ property: Swift.ReferenceWritableKeyPath<CuvoAgent.LottieAnimationView, Property>, to value: Property) -> CuvoAgent.LottieView<Placeholder> where Property : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (CuvoAgent.LottieAnimationView) -> Swift.Void) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func resizable() -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func intrinsicSize() -> CuvoAgent.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playing()", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play() -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func looping() -> CuvoAgent.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playing(_:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play(loopMode: CuvoAgent.LottieLoopMode = .playOnce) -> CuvoAgent.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playbackMode(_:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play(_ playbackMode: CuvoAgent.LottiePlaybackMode) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing(_ mode: CuvoAgent.LottiePlaybackMode.PlaybackMode) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing(loopMode: CuvoAgent.LottieLoopMode) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing() -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func paused(at state: CuvoAgent.LottiePlaybackMode.PausedState = .currentFrame) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playbackMode(_ playbackMode: CuvoAgent.LottiePlaybackMode) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func animationSpeed(_ animationSpeed: Swift.Double) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func animationDidLoad(_ animationDidLoad: @escaping (CuvoAgent.LottieAnimationSource) -> Swift.Void) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func animationDidFinish(_ animationCompletionHandler: CuvoAgent.LottieCompletionBlock?) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func backgroundBehavior(_ value: CuvoAgent.LottieBackgroundBehavior) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func accessibilityLabel(_ accessibilityLabel: Swift.String?) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: CuvoAgent.LottieConfiguration) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func logger(_ logger: CuvoAgent.LottieLogger) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func imageProvider<ImageProvider>(_ imageProvider: ImageProvider) -> CuvoAgent.LottieView<Placeholder> where ImageProvider : CuvoAgent.AnimationImageProvider, ImageProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func textProvider<TextProvider>(_ textProvider: TextProvider) -> CuvoAgent.LottieView<Placeholder> where TextProvider : CuvoAgent.AnimationKeypathTextProvider, TextProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func fontProvider<FontProvider>(_ fontProvider: FontProvider) -> CuvoAgent.LottieView<Placeholder> where FontProvider : CuvoAgent.AnimationFontProvider, FontProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: CuvoAgent.AnimationKeypath) -> CuvoAgent.LottieView<Placeholder> where ValueProvider : CuvoAgent.AnyValueProvider, ValueProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func currentProgress(_ currentProgress: CuvoAgent.AnimationProgressTime?) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func currentFrame(_ currentFrame: CuvoAgent.AnimationFrameTime?) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func currentTime(_ currentTime: Foundation.TimeInterval?) -> CuvoAgent.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func reloadAnimationTrigger(_ value: some Equatable, showPlaceholder: Swift.Bool = true) -> CuvoAgent.LottieView<Placeholder>
  @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
  @_Concurrency.MainActor @preconcurrency public func getRealtimeAnimationProgress(_ realtimeAnimationProgress: SwiftUICore.Binding<CuvoAgent.AnimationProgressTime>?) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
  @_Concurrency.MainActor @preconcurrency public func getRealtimeAnimationFrame(_ realtimeAnimationFrame: SwiftUICore.Binding<CuvoAgent.AnimationFrameTime>?) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func dotLottieConfigurationComponents(_ dotLottieConfigurationComponents: CuvoAgent.DotLottieConfigurationComponents) -> CuvoAgent.LottieView<Placeholder>
  public typealias Body = @_opaqueReturnTypeOf("$s9CuvoAgent10LottieViewV4bodyQrvp", 0) __<Placeholder>
}
public enum LottieAnimationCache {
  public static var shared: (any CuvoAgent.AnimationCacheProvider)?
}
final public class PointValueProvider {
  public init(block: @escaping CuvoAgent.PointValueProvider.PointValueBlock)
  public init(_ point: CoreFoundation.CGPoint)
  public typealias PointValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  final public var point: CoreFoundation.CGPoint {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: CuvoAgent.ValueProviderStorage<CuvoAgent.LottieVector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension CuvoAgent.PointValueProvider : Swift.Equatable {
  public static func == (lhs: CuvoAgent.PointValueProvider, rhs: CuvoAgent.PointValueProvider) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency public struct LottieButton {
  @_Concurrency.MainActor @preconcurrency public init(animation: CuvoAgent.LottieAnimation?, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (CuvoAgent.AnimatedButton) -> Swift.Void) -> CuvoAgent.LottieButton
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: CuvoAgent.LottieConfiguration) -> CuvoAgent.LottieButton
  @_Concurrency.MainActor @preconcurrency public func animate(fromProgress: CuvoAgent.AnimationProgressTime, toProgress: CuvoAgent.AnimationProgressTime, on event: CuvoAgent.LottieControlEvent) -> CuvoAgent.LottieButton
  @_Concurrency.MainActor @preconcurrency public func animate(fromMarker: Swift.String, toMarker: Swift.String, on event: CuvoAgent.LottieControlEvent) -> CuvoAgent.LottieButton
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: CuvoAgent.AnimationKeypath) -> CuvoAgent.LottieButton where ValueProvider : CuvoAgent.AnyValueProvider, ValueProvider : Swift.Equatable
  public typealias Body = @_opaqueReturnTypeOf("$s9CuvoAgent12LottieButtonV4bodyQrvp", 0) __
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageAsset : CuvoAgent.Asset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension CuvoAgent.ImageAsset : @unchecked Swift.Sendable {
}
public enum ColorFormatDenominator : Swift.Hashable {
  case One
  case OneHundred
  case TwoFiftyFive
  public static func == (a: CuvoAgent.ColorFormatDenominator, b: CuvoAgent.ColorFormatDenominator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieColor : Swift.Hashable {
  public var r: Swift.Double
  public var g: Swift.Double
  public var b: Swift.Double
  public var a: Swift.Double
  public init(r: Swift.Double, g: Swift.Double, b: Swift.Double, a: Swift.Double, denominator: CuvoAgent.ColorFormatDenominator = .One)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CuvoAgent.LottieColor, b: CuvoAgent.LottieColor) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnimationCacheProvider : AnyObject, Swift.Sendable {
  func animation(forKey: Swift.String) -> CuvoAgent.LottieAnimation?
  func setAnimation(_ animation: CuvoAgent.LottieAnimation, forKey: Swift.String)
  func clearCache()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AnimatedSwitch : CuvoAgent.AnimatedControl {
  @_Concurrency.MainActor @preconcurrency override public init(animation: CuvoAgent.LottieAnimation?, configuration: CuvoAgent.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override open func animationDidSet()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  public enum CancelBehavior {
    case reverse
    case none
    public static func == (a: CuvoAgent.AnimatedSwitch.CancelBehavior, b: CuvoAgent.AnimatedSwitch.CancelBehavior) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var cancelBehavior: CuvoAgent.AnimatedSwitch.CancelBehavior
  @_Concurrency.MainActor @preconcurrency public var animateUpdateWhenChangingAnimation: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var stateUpdated: ((_ isOn: Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var isOn: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setIsOn(_ isOn: Swift.Bool, animated: Swift.Bool, shouldFireHaptics: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func setProgressForState(fromProgress: CuvoAgent.AnimationProgressTime, toProgress: CuvoAgent.AnimationProgressTime, forOnState: Swift.Bool)
  @objc deinit
}
final public class GradientValueProvider {
  public init(block: @escaping CuvoAgent.GradientValueProvider.ColorsValueBlock, locations: CuvoAgent.GradientValueProvider.ColorLocationsBlock? = nil)
  public init(_ colors: [CuvoAgent.LottieColor], locations: [Swift.Double] = [])
  public typealias ColorsValueBlock = (CoreFoundation.CGFloat) -> [CuvoAgent.LottieColor]
  public typealias ColorLocationsBlock = (CoreFoundation.CGFloat) -> [Swift.Double]
  final public var colors: [CuvoAgent.LottieColor] {
    get
    set
  }
  final public var locations: [Swift.Double] {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: CuvoAgent.ValueProviderStorage<[Swift.Double]> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension CuvoAgent.GradientValueProvider : Swift.Equatable {
  public static func == (lhs: CuvoAgent.GradientValueProvider, rhs: CuvoAgent.GradientValueProvider) -> Swift.Bool
}
public protocol Interpolatable : CuvoAgent.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
public protocol SpatialInterpolatable : CuvoAgent.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
public protocol AnyInterpolatable {
  func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension CuvoAgent.Interpolatable {
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent _: CoreFoundation.CGPoint?, spatialInTangent _: CoreFoundation.CGPoint?) -> Self
}
extension CuvoAgent.SpatialInterpolatable {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension Swift.Double : CuvoAgent.Interpolatable {
}
extension CoreFoundation.CGFloat : CuvoAgent.Interpolatable {
}
extension Swift.Float : CuvoAgent.Interpolatable {
}
extension CuvoAgent.Interpolatable where Self : Swift.BinaryFloatingPoint {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
extension CoreFoundation.CGRect : CuvoAgent.Interpolatable {
  public func interpolate(to: CoreFoundation.CGRect, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
}
extension CoreFoundation.CGSize : CuvoAgent.Interpolatable {
  public func interpolate(to: CoreFoundation.CGSize, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
extension CoreFoundation.CGPoint : CuvoAgent.SpatialInterpolatable {
  public func interpolate(to: CoreFoundation.CGPoint, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> CoreFoundation.CGPoint
}
extension CuvoAgent.LottieColor : CuvoAgent.Interpolatable {
  public func interpolate(to: CuvoAgent.LottieColor, amount: CoreFoundation.CGFloat) -> CuvoAgent.LottieColor
}
extension CuvoAgent.LottieVector1D : CuvoAgent.Interpolatable {
  public func interpolate(to: CuvoAgent.LottieVector1D, amount: CoreFoundation.CGFloat) -> CuvoAgent.LottieVector1D
}
extension CuvoAgent.LottieVector2D : CuvoAgent.SpatialInterpolatable {
  public func interpolate(to: CuvoAgent.LottieVector2D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> CuvoAgent.LottieVector2D
}
extension CuvoAgent.LottieVector3D : CuvoAgent.SpatialInterpolatable {
  public func interpolate(to: CuvoAgent.LottieVector3D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> CuvoAgent.LottieVector3D
}
extension Swift.Array : CuvoAgent.Interpolatable, CuvoAgent.AnyInterpolatable where Element : CuvoAgent.Interpolatable {
  public func interpolate(to: [Element], amount: CoreFoundation.CGFloat) -> [Element]
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : CuvoAgent.Interpolatable, CuvoAgent.AnyInterpolatable where Wrapped : CuvoAgent.Interpolatable {
  public func interpolate(to: Wrapped?, amount: CoreFoundation.CGFloat) -> Wrapped?
}
#else
extension Swift.Optional : CuvoAgent.Interpolatable, CuvoAgent.AnyInterpolatable where Wrapped : CuvoAgent.Interpolatable {
  public func interpolate(to: Wrapped?, amount: CoreFoundation.CGFloat) -> Wrapped?
}
#endif
final public class Keyframe<T> {
  public init(_ value: T, spatialInTangent: CuvoAgent.LottieVector3D? = nil, spatialOutTangent: CuvoAgent.LottieVector3D? = nil)
  public init(value: T, time: CuvoAgent.AnimationFrameTime, isHold: Swift.Bool = false, inTangent: CuvoAgent.LottieVector2D? = nil, outTangent: CuvoAgent.LottieVector2D? = nil, spatialInTangent: CuvoAgent.LottieVector3D? = nil, spatialOutTangent: CuvoAgent.LottieVector3D? = nil)
  final public let value: T
  final public let time: CuvoAgent.AnimationFrameTime
  final public let isHold: Swift.Bool
  final public let inTangent: CuvoAgent.LottieVector2D?
  final public let outTangent: CuvoAgent.LottieVector2D?
  final public let spatialInTangent: CuvoAgent.LottieVector3D?
  final public let spatialOutTangent: CuvoAgent.LottieVector3D?
  @objc deinit
}
extension CuvoAgent.Keyframe : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: CuvoAgent.Keyframe<T>, rhs: CuvoAgent.Keyframe<T>) -> Swift.Bool
}
extension CuvoAgent.Keyframe : Swift.Hashable where T : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension CuvoAgent.Keyframe : Swift.Sendable where T : Swift.Sendable {
}
public class BundleImageProvider : CuvoAgent.AnimationImageProvider {
  public init(bundle: Foundation.Bundle, searchPath: Swift.String?, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public func imageForAsset(asset: CuvoAgent.ImageAsset) -> CoreGraphics.CGImage?
  public func contentsGravity(for _: CuvoAgent.ImageAsset) -> QuartzCore.CALayerContentsGravity
  @objc deinit
}
extension CuvoAgent.BundleImageProvider : Swift.Equatable {
  public static func == (lhs: CuvoAgent.BundleImageProvider, rhs: CuvoAgent.BundleImageProvider) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AnimatedButton : CuvoAgent.AnimatedControl {
  @_Concurrency.MainActor @preconcurrency override public init(animation: CuvoAgent.LottieAnimation?, configuration: CuvoAgent.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency public var performAction: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func setPlayRange(fromProgress: CuvoAgent.AnimationProgressTime, toProgress: CuvoAgent.AnimationProgressTime, event: CuvoAgent.LottieControlEvent)
  @_Concurrency.MainActor @preconcurrency public func setPlayRange(fromMarker fromName: Swift.String, toMarker toName: Swift.String, event: CuvoAgent.LottieControlEvent)
  @objc deinit
}
public struct LottieVector1D : Swift.Hashable, Swift.Sendable {
  public init(_ value: Swift.Double)
  public let value: Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CuvoAgent.LottieVector1D, b: CuvoAgent.LottieVector1D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieVector3D : Swift.Hashable, Swift.Sendable {
  public let x: Swift.Double
  public let y: Swift.Double
  public let z: Swift.Double
  public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CuvoAgent.LottieVector3D, b: CuvoAgent.LottieVector3D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class ColorValueProvider {
  public init(block: @escaping CuvoAgent.ColorValueProvider.ColorValueBlock)
  public init(_ color: CuvoAgent.LottieColor)
  public init(_ keyframes: [CuvoAgent.Keyframe<CuvoAgent.LottieColor>])
  public typealias ColorValueBlock = (CoreFoundation.CGFloat) -> CuvoAgent.LottieColor
  final public var color: CuvoAgent.LottieColor {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: CuvoAgent.ValueProviderStorage<CuvoAgent.LottieColor> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension CuvoAgent.ColorValueProvider : Swift.Equatable {
  public static func == (lhs: CuvoAgent.ColorValueProvider, rhs: CuvoAgent.ColorValueProvider) -> Swift.Bool
}
public enum LottieBackgroundBehavior {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  case continuePlaying
  public static func `default`(for renderingEngine: CuvoAgent.RenderingEngine) -> CuvoAgent.LottieBackgroundBehavior
  public static func == (a: CuvoAgent.LottieBackgroundBehavior, b: CuvoAgent.LottieBackgroundBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieLoopMode : Swift.Hashable {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CuvoAgent.LottieLoopMode : Swift.Equatable {
  public static func == (lhs: CuvoAgent.LottieLoopMode, rhs: CuvoAgent.LottieLoopMode) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class LottieAnimationView : CuvoAgent.LottieAnimationViewBase {
  @_Concurrency.MainActor @preconcurrency public init(animation: CuvoAgent.LottieAnimation?, imageProvider: (any CuvoAgent.AnimationImageProvider)? = nil, textProvider: any CuvoAgent.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any CuvoAgent.AnimationFontProvider = DefaultFontProvider(), configuration: CuvoAgent.LottieConfiguration = .shared, logger: CuvoAgent.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency public init(dotLottie: CuvoAgent.DotLottieFile?, animationId: Swift.String? = nil, textProvider: any CuvoAgent.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any CuvoAgent.AnimationFontProvider = DefaultFontProvider(), configuration: CuvoAgent.LottieConfiguration = .shared, logger: CuvoAgent.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency public init(configuration: CuvoAgent.LottieConfiguration = .shared, logger: CuvoAgent.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func play(_ mode: CuvoAgent.LottiePlaybackMode.PlaybackMode, completion: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(completion: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromProgress: CuvoAgent.AnimationProgressTime? = nil, toProgress: CuvoAgent.AnimationProgressTime, loopMode: CuvoAgent.LottieLoopMode? = nil, completion: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromFrame: CuvoAgent.AnimationFrameTime? = nil, toFrame: CuvoAgent.AnimationFrameTime, loopMode: CuvoAgent.LottieLoopMode? = nil, completion: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: CuvoAgent.LottieLoopMode? = nil, completion: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(marker: Swift.String, loopMode: CuvoAgent.LottieLoopMode? = nil, completion: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(markers: [Swift.String], completion: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func stop()
  @_Concurrency.MainActor @preconcurrency open func pause()
  @available(*, deprecated, renamed: "setPlaybackMode(_:completion:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency open func play(_ playbackMode: CuvoAgent.LottiePlaybackMode, animationCompletionHandler: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func setPlaybackMode(_ playbackMode: CuvoAgent.LottiePlaybackMode, completion: CuvoAgent.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency public var animateLayoutChangesWithCurrentCoreAnimationContext: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var configuration: CuvoAgent.LottieConfiguration {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var valueProviders: [CuvoAgent.AnimationKeypath : any CuvoAgent.AnyValueProvider] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var backgroundBehavior: CuvoAgent.LottieBackgroundBehavior {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animation: CuvoAgent.LottieAnimation? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animationLoaded: ((_ animationView: CuvoAgent.LottieAnimationView, _ animation: CuvoAgent.LottieAnimation) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var imageProvider: any CuvoAgent.AnimationImageProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textProvider: any CuvoAgent.AnimationKeypathTextProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var fontProvider: any CuvoAgent.AnimationFontProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var maskAnimationToBounds: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isAnimationPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isAnimationQueued: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var loopMode: CuvoAgent.LottieLoopMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentProgress: CuvoAgent.AnimationProgressTime {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentFrame: CuvoAgent.AnimationFrameTime {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var realtimeAnimationFrame: CuvoAgent.AnimationFrameTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var realtimeAnimationProgress: CuvoAgent.AnimationProgressTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var viewportFrame: CoreFoundation.CGRect? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public var currentRenderingEngine: CuvoAgent.RenderingEngine? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentPlaybackMode: CuvoAgent.LottiePlaybackMode? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var mainThreadRenderingEngineShouldForceDisplayUpdateOnEachFrame: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func loadAnimation(_ animationId: Swift.String? = nil, from dotLottieFile: CuvoAgent.DotLottieFile)
  @_Concurrency.MainActor @preconcurrency public func loadAnimation(atIndex index: Swift.Int, from dotLottieFile: CuvoAgent.DotLottieFile)
  @_Concurrency.MainActor @preconcurrency public func reloadImages()
  @_Concurrency.MainActor @preconcurrency public func forceDisplayUpdate()
  @_Concurrency.MainActor @preconcurrency public func setValueProvider(_ valueProvider: any CuvoAgent.AnyValueProvider, keypath: CuvoAgent.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func removeValueProvider(for keypath: CuvoAgent.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func getValue(for keypath: CuvoAgent.AnimationKeypath, atFrame: CuvoAgent.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor @preconcurrency public func getOriginalValue(for keypath: CuvoAgent.AnimationKeypath, atFrame: CuvoAgent.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor @preconcurrency public func logHierarchyKeypaths()
  @_Concurrency.MainActor @preconcurrency public func allHierarchyKeypaths() -> [Swift.String]
  @_Concurrency.MainActor @preconcurrency public func addSubview(_ subview: CuvoAgent.AnimationSubview, forLayerAt keypath: CuvoAgent.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: CuvoAgent.AnimationKeypath?) -> CoreFoundation.CGRect?
  @_Concurrency.MainActor @preconcurrency public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: CuvoAgent.AnimationKeypath?) -> CoreFoundation.CGPoint?
  @_Concurrency.MainActor @preconcurrency public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: CuvoAgent.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func progressTime(forMarker named: Swift.String) -> CuvoAgent.AnimationProgressTime?
  @_Concurrency.MainActor @preconcurrency public func frameTime(forMarker named: Swift.String) -> CuvoAgent.AnimationFrameTime?
  @_Concurrency.MainActor @preconcurrency public func durationFrameTime(forMarker named: Swift.String) -> CuvoAgent.AnimationFrameTime?
  @objc deinit
}
extension UIKit.UIColor {
  public var lottieColorValue: CuvoAgent.LottieColor {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class AnimationSubview : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CuvoAgent.LottieAnimation {
  public typealias DownloadClosure = (CuvoAgent.LottieAnimation?) -> Swift.Void
  final public var duration: Foundation.TimeInterval {
    get
  }
  final public var bounds: CoreFoundation.CGRect {
    get
  }
  final public var size: CoreFoundation.CGSize {
    get
  }
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared) -> CuvoAgent.LottieAnimation?
  public static func filepath(_ filepath: Swift.String, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared) -> CuvoAgent.LottieAnimation?
  public static func asset(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared) -> CuvoAgent.LottieAnimation?
  public static func from(data: Foundation.Data, strategy: CuvoAgent.DecodingStrategy = LottieConfiguration.shared.decodingStrategy) throws -> CuvoAgent.LottieAnimation
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared) async -> CuvoAgent.LottieAnimation?
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, closure: @escaping CuvoAgent.LottieAnimation.DownloadClosure, animationCache: (any CuvoAgent.AnimationCacheProvider)? = LottieAnimationCache.shared)
  final public func progressTime(forMarker named: Swift.String) -> CuvoAgent.AnimationProgressTime?
  final public func frameTime(forMarker named: Swift.String) -> CuvoAgent.AnimationFrameTime?
  final public func durationFrameTime(forMarker named: Swift.String) -> CuvoAgent.AnimationFrameTime?
  final public func progressTime(forFrame frameTime: CuvoAgent.AnimationFrameTime, clamped: Swift.Bool = true) -> CuvoAgent.AnimationProgressTime
  final public func frameTime(forProgress progressTime: CuvoAgent.AnimationProgressTime) -> CuvoAgent.AnimationFrameTime
  final public func time(forFrame frameTime: CuvoAgent.AnimationFrameTime) -> Foundation.TimeInterval
  final public func frameTime(forTime time: Foundation.TimeInterval) -> CuvoAgent.AnimationFrameTime
}
extension Foundation.Bundle : @unchecked Swift.Sendable {
}
@objc final public class CompatibleAnimationKeypath : ObjectiveC.NSObject {
  @objc public init(keypath: Swift.String)
  @objc public init(keys: [Swift.String])
  final public let animationKeypath: CuvoAgent.AnimationKeypath
  @objc deinit
}
public protocol AnyValueProvider {
  var valueType: any Any.Type { get }
  var typeErasedStorage: CuvoAgent.AnyValueProviderStorage { get }
  func hasUpdate(frame: CuvoAgent.AnimationFrameTime) -> Swift.Bool
}
extension CuvoAgent.AnyValueProvider {
  public func value(frame: CuvoAgent.AnimationFrameTime) -> Any
}
public enum ValueProviderStorage<T> where T : CuvoAgent.AnyInterpolatable {
  case singleValue(T)
  case keyframes([CuvoAgent.Keyframe<T>])
  case closure((CuvoAgent.AnimationFrameTime) -> T)
}
public enum AnyValueProviderStorage {
  case singleValue(Any)
  case keyframes([CuvoAgent.Keyframe<Any>], interpolate: (CuvoAgent.AnimationFrameTime) -> Any)
  case closure((CuvoAgent.AnimationFrameTime) -> Any)
}
public enum CoordinateSpace : Swift.Int, Swift.Codable, Swift.Sendable {
  case type2d
  case type3d
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class LottieAnimation : Swift.Codable, Swift.Sendable {
  required public init(from decoder: any Swift.Decoder) throws
  public init(dictionary: [Swift.String : Any]) throws
  final public let startFrame: CuvoAgent.AnimationFrameTime
  final public let endFrame: CuvoAgent.AnimationFrameTime
  final public let framerate: Swift.Double
  final public var markerNames: [Swift.String] {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public enum ReducedMotionOption {
  case specific(CuvoAgent.ReducedMotionMode)
  case dynamic(any CuvoAgent.ReducedMotionOptionProvider, dataID: Swift.AnyHashable)
}
extension CuvoAgent.ReducedMotionOption {
  public static var standardMotion: CuvoAgent.ReducedMotionOption {
    get
  }
  public static var reducedMotion: CuvoAgent.ReducedMotionOption {
    get
  }
  public static var systemReducedMotionToggle: CuvoAgent.ReducedMotionOption {
    get
  }
}
extension CuvoAgent.ReducedMotionOption {
  public var currentReducedMotionMode: CuvoAgent.ReducedMotionMode {
    get
  }
}
extension CuvoAgent.ReducedMotionOption : Swift.Hashable {
  public static func == (lhs: CuvoAgent.ReducedMotionOption, rhs: CuvoAgent.ReducedMotionOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReducedMotionMode : Swift.Hashable {
  case standardMotion
  case reducedMotion
  public static func == (a: CuvoAgent.ReducedMotionMode, b: CuvoAgent.ReducedMotionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ReducedMotionOptionProvider {
  var currentReducedMotionMode: CuvoAgent.ReducedMotionMode { get }
}
public struct SystemReducedMotionOptionProvider : CuvoAgent.ReducedMotionOptionProvider {
  public init()
  public var currentReducedMotionMode: CuvoAgent.ReducedMotionMode {
    get
  }
}
@_hasMissingDesignatedInitializers final public class DotLottieFile {
  public struct Animation {
    public let animation: CuvoAgent.LottieAnimation
    public let configuration: CuvoAgent.DotLottieConfiguration
  }
  final public var animations: [CuvoAgent.DotLottieFile.Animation] {
    get
  }
  @objc deinit
}
extension CuvoAgent.DotLottieFile : @unchecked Swift.Sendable {
}
@objc @_Concurrency.MainActor @preconcurrency open class AnimatedControl : CuvoAgent.LottieControlType {
  @_Concurrency.MainActor @preconcurrency public init(animation: CuvoAgent.LottieAnimation?, configuration: CuvoAgent.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency open func animationDidSet()
  @_Concurrency.MainActor @preconcurrency final public let animationView: CuvoAgent.LottieAnimationView
  @_Concurrency.MainActor @preconcurrency public var animation: CuvoAgent.LottieAnimation? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setLayer(named: Swift.String, forState: CuvoAgent.LottieControlState)
  @_Concurrency.MainActor @preconcurrency public func setValueProvider(_ valueProvider: any CuvoAgent.AnyValueProvider, keypath: CuvoAgent.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func removeValueProvider(for keypath: CuvoAgent.AnimationKeypath)
  @objc deinit
}
extension UIKit.UIView {
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func edgesToSuperview(excluding excludedEdge: CuvoAgent.LayoutEdge = .none, insets: CuvoAgent.TinyEdgeInsets = .zero, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraints
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func leadingToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func trailingToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func horizontalToSuperview(insets: CuvoAgent.TinyEdgeInsets = .zero, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraints
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func verticalToSuperview(insets: CuvoAgent.TinyEdgeInsets = .zero, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraints
}
public struct LayoutEdge : Swift.OptionSet {
  public let rawValue: Swift.UInt8
  public init(rawValue: Swift.UInt8)
  public static let top: CuvoAgent.LayoutEdge
  public static let bottom: CuvoAgent.LayoutEdge
  public static let trailing: CuvoAgent.LayoutEdge
  public static let leading: CuvoAgent.LayoutEdge
  public static let left: CuvoAgent.LayoutEdge
  public static let right: CuvoAgent.LayoutEdge
  public static let none: CuvoAgent.LayoutEdge
  public typealias ArrayLiteralElement = CuvoAgent.LayoutEdge
  public typealias Element = CuvoAgent.LayoutEdge
  public typealias RawValue = Swift.UInt8
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func centerInSuperview(offset: CoreFoundation.CGPoint = .zero, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraints
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func originToSuperview(insets: CuvoAgent.TinyEdgeInsets = .zero, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraints
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func widthToSuperview(_ dimension: UIKit.NSLayoutDimension? = nil, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func heightToSuperview(_ dimension: UIKit.NSLayoutDimension? = nil, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func leftToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func rightToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func topToSuperview(_ anchor: UIKit.NSLayoutYAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func bottomToSuperview(_ anchor: UIKit.NSLayoutYAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func centerXToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func centerYToSuperview(_ anchor: UIKit.NSLayoutYAxisAnchor? = nil, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> CuvoAgent.Constraint
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func stack(_ views: [CuvoAgent.TinyView], axis: CuvoAgent.ConstraintAxis = .vertical, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, spacing: CoreFoundation.CGFloat = 0) -> CuvoAgent.Constraints
}
@_hasMissingDesignatedInitializers public class Reachability {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class KeyboardDismissingView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var dismissingBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var touchEndedBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public class func resignAnyFirstResponder(_ view: UIKit.UIView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CuvoAgentManager : ObjectiveC.NSObject {
  public var detailDictionay: [Swift.String : Any]
  public var email: Swift.String
  @objc override dynamic public init()
  @objc public func updateAgentDetail(keyWindow: UIKit.UIWindow, isDarkTheme: Swift.Bool, isCustomButton: Swift.Bool, ordId: Swift.String, prodId: Swift.String, productVersion: Swift.String, endPoint: Swift.String, apiKey: Swift.String, fontName: Swift.String, languageCode: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func openFeedbackInfo()
  @objc deinit
}
extension CuvoAgent.CuvoAgentManager {
  public static func show()
  public static func hide()
  public static func close()
  public static func open(module: CuvoAgent.CuvoAgentManager.CuvoModule)
  public static func setUserDetails(_ userDetail: [Swift.String : Any])
  public static func removeUserDetails()
  public enum CuvoModule : Swift.String {
    case BUGS
    case FEEDBACK
    case FEATURE_REQUEST
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension CuvoAgent.Constrainable {
  @discardableResult
  public func center(in view: any CuvoAgent.Constrainable, offset: CoreFoundation.CGPoint = .zero, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraints
  @discardableResult
  public func edges(to view: any CuvoAgent.Constrainable, excluding excludedEdge: CuvoAgent.LayoutEdge = .none, insets: CuvoAgent.TinyEdgeInsets = .zero, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraints
  @discardableResult
  public func size(_ size: CoreFoundation.CGSize, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraints
  @discardableResult
  public func size(to view: any CuvoAgent.Constrainable, multiplier: CoreFoundation.CGFloat = 1, insets: CoreFoundation.CGSize = .zero, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraints
  @discardableResult
  public func origin(to view: any CuvoAgent.Constrainable, insets: CuvoAgent.TinyEdgeInsets = .zero, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraints
  @discardableResult
  public func width(_ width: CoreFoundation.CGFloat, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func width(to view: any CuvoAgent.Constrainable, _ dimension: UIKit.NSLayoutDimension? = nil, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func widthToHeight(of view: any CuvoAgent.Constrainable, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func width(min: CoreFoundation.CGFloat? = nil, max: CoreFoundation.CGFloat? = nil, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraints
  @discardableResult
  public func height(_ height: CoreFoundation.CGFloat, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func height(to view: any CuvoAgent.Constrainable, _ dimension: UIKit.NSLayoutDimension? = nil, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func heightToWidth(of view: any CuvoAgent.Constrainable, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func height(min: CoreFoundation.CGFloat? = nil, max: CoreFoundation.CGFloat? = nil, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraints
  @discardableResult
  public func aspectRatio(_ ratio: CoreFoundation.CGFloat, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func leadingToTrailing(of view: any CuvoAgent.Constrainable, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func leading(to view: any CuvoAgent.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func leftToRight(of view: any CuvoAgent.Constrainable, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func left(to view: any CuvoAgent.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func trailingToLeading(of view: any CuvoAgent.Constrainable, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func trailing(to view: any CuvoAgent.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func rightToLeft(of view: any CuvoAgent.Constrainable, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func right(to view: any CuvoAgent.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func topToBottom(of view: any CuvoAgent.Constrainable, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func top(to view: any CuvoAgent.Constrainable, _ anchor: UIKit.NSLayoutYAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func bottomToTop(of view: any CuvoAgent.Constrainable, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func bottom(to view: any CuvoAgent.Constrainable, _ anchor: UIKit.NSLayoutYAxisAnchor? = nil, offset: CoreFoundation.CGFloat = 0, relation: CuvoAgent.ConstraintRelation = .equal, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func centerX(to view: any CuvoAgent.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
  @discardableResult
  public func centerY(to view: any CuvoAgent.Constrainable, _ anchor: UIKit.NSLayoutYAxisAnchor? = nil, multiplier: CoreFoundation.CGFloat = 1, offset: CoreFoundation.CGFloat = 0, priority: CuvoAgent.LayoutPriority = .required, isActive: Swift.Bool = true) -> CuvoAgent.Constraint
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func setHugging(_ priority: CuvoAgent.LayoutPriority, for axis: CuvoAgent.ConstraintAxis)
  @_Concurrency.MainActor @preconcurrency public func setCompressionResistance(_ priority: CuvoAgent.LayoutPriority, for axis: CuvoAgent.ConstraintAxis)
}
@objc @_hasMissingDesignatedInitializers open class DocumentPicker : ObjectiveC.NSObject {
  public func displayPicker()
  @objc deinit
}
extension CuvoAgent.DocumentPicker : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
}
public class Manager {
  public static var isFooterStickyEnabled: Swift.Bool
  public init()
  public func updateAgentDetail(keyWindow: UIKit.UIWindow, isDarkTheme: Swift.Bool, isCustomButton: Swift.Bool, ordId: Swift.String, prodId: Swift.String, productVersion: Swift.String, endPoint: Swift.String, apiKey: Swift.String, fontName: Swift.String, languageCode: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func showChatButton()
  @objc public func hideChatButton()
  public func opencuvoFeedbBackView()
  @objc public func updateWindow(window: UIKit.UIWindow)
  @objc public func updateEmail(email: Swift.String)
  @objc deinit
}
public enum AttachmentType : Swift.String {
  case screenRecording
  case screenshot
  case audioRecording
  case attachmentFile
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.NSURL {
  public func mimeType() -> Swift.String
}
extension Foundation.URL {
  public func mimeType() -> Swift.String
}
extension Foundation.NSString {
  public func mimeType() -> Swift.String
  public func attachmentFileType() -> Swift.String
}
extension Swift.String {
  public func mimeType() -> Swift.String
  public func attachmentFileType() -> Swift.String
}
extension CuvoAgent.ConstraintRelation : Swift.Equatable {}
extension CuvoAgent.ConstraintRelation : Swift.Hashable {}
extension CuvoAgent.ConstraintRelation : Swift.RawRepresentable {}
extension CuvoAgent.ScreenRecorder.recordingQuality : Swift.Equatable {}
extension CuvoAgent.ScreenRecorder.recordingQuality : Swift.Hashable {}
extension CuvoAgent.ScreenRecorder.recordingQuality : Swift.RawRepresentable {}
extension CuvoAgent.KeyboardAvoidingMode : Swift.Equatable {}
extension CuvoAgent.KeyboardAvoidingMode : Swift.Hashable {}
extension CuvoAgent.KeyboardAvoidingMode : Swift.RawRepresentable {}
extension CuvoAgent.BlendMode : Swift.Equatable {}
extension CuvoAgent.BlendMode : Swift.Hashable {}
extension CuvoAgent.BlendMode : Swift.RawRepresentable {}
extension CuvoAgent.SizeValueProvider : CuvoAgent.AnyValueProvider {}
extension CuvoAgent.LayerType : Swift.Equatable {}
extension CuvoAgent.LayerType : Swift.Hashable {}
extension CuvoAgent.LayerType : Swift.RawRepresentable {}
extension CuvoAgent.MatteType : Swift.Equatable {}
extension CuvoAgent.MatteType : Swift.Hashable {}
extension CuvoAgent.MatteType : Swift.RawRepresentable {}
extension CuvoAgent.CompatibleRenderingEngineOption : Swift.Equatable {}
extension CuvoAgent.CompatibleRenderingEngineOption : Swift.Hashable {}
extension CuvoAgent.CompatibleRenderingEngineOption : Swift.RawRepresentable {}
extension CuvoAgent.CompatibleBackgroundBehavior : Swift.Equatable {}
extension CuvoAgent.CompatibleBackgroundBehavior : Swift.Hashable {}
extension CuvoAgent.CompatibleBackgroundBehavior : Swift.RawRepresentable {}
extension CuvoAgent.FloatValueProvider : CuvoAgent.AnyValueProvider {}
extension CuvoAgent.LottieSwitch : SwiftUICore.View {}
extension CuvoAgent.LottieSwitch : Swift.Sendable {}
extension CuvoAgent.LottieView : SwiftUICore.View {}
extension CuvoAgent.LottieView : Swift.Sendable {}
extension CuvoAgent.PointValueProvider : CuvoAgent.AnyValueProvider {}
extension CuvoAgent.LottieButton : SwiftUICore.View {}
extension CuvoAgent.LottieButton : Swift.Sendable {}
extension CuvoAgent.AnimatedSwitch.CancelBehavior : Swift.Equatable {}
extension CuvoAgent.AnimatedSwitch.CancelBehavior : Swift.Hashable {}
extension CuvoAgent.GradientValueProvider : CuvoAgent.AnyValueProvider {}
extension CuvoAgent.ColorValueProvider : CuvoAgent.AnyValueProvider {}
extension CuvoAgent.LottieBackgroundBehavior : Swift.Equatable {}
extension CuvoAgent.LottieBackgroundBehavior : Swift.Hashable {}
extension CuvoAgent.CoordinateSpace : Swift.Equatable {}
extension CuvoAgent.CoordinateSpace : Swift.Hashable {}
extension CuvoAgent.CoordinateSpace : Swift.RawRepresentable {}
extension CuvoAgent.CuvoAgentManager.CuvoModule : Swift.Equatable {}
extension CuvoAgent.CuvoAgentManager.CuvoModule : Swift.Hashable {}
extension CuvoAgent.CuvoAgentManager.CuvoModule : Swift.RawRepresentable {}
extension CuvoAgent.AttachmentType : Swift.Equatable {}
extension CuvoAgent.AttachmentType : Swift.Hashable {}
extension CuvoAgent.AttachmentType : Swift.RawRepresentable {}
